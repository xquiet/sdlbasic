# Global initialisation file for SciTE
# version for sdlBasic editor

# For Linux, place in $prefix/share/scite
# For Windows, place in same directory as SciTE.EXE (or Sc1.EXE)
# Documentation at http://www.scintilla.org/SciTEDoc.html

# Globals
error.select.line=1
# Window sizes and visibility
if PLAT_WIN
	position.left=0
	position.top=0
if PLAT_GTK2
	position.left=5
	position.top=22
#was 576,640 but that was too narrow and required me to resize all the time
position.width=1000
position.height=-1
position.tile=1
#full.screen.hides.menu=1
#minimize.to.tray=1
split.vertical=0
output.horizontal.size=200
output.vertical.size=60
#horizontal.scrollbar=0
horizontal.scroll.width=2200
#output.horizontal.scrollbar=0
#output.horizontal.scroll.width=10000
#output.scroll=0
#end.at.last.line=0
tabbar.visible=1
tabbar.hide.one=1
tabbar.multiline=1
toolbar.visible=1
#undo.redo.lazy=1
statusbar.visible=1
#fileselector.width=800
#fileselector.height=600
#magnification=-1
#output.magnification=-1

# Sizes and visibility in edit pane
# Set line.numbers to 4 if you want to see them
line.numbers=4
margin.width=0
line.margin.visible=1

#fold.margin.width=16
#fold.margin.colour=#FF0000
#fold.margin.highlight.colour=#0000FF
#blank.margin.left=4
#blank.margin.right=4
buffered.draw=1
two.phase.draw=1
use.palette=0

# Element styles
#view.eol=1
#control.char.symbol=.
caret.period=500
view.whitespace=0
view.indentation.whitespace=1
view.indentation.guides=1
highlight.indentation.guides=1
caret.fore=#FF0000
caret.width=4
caret.line.back=#FFFED8
calltip.back=#FFF0FE
edge.column=200
edge.mode=0
edge.colour=#C0DCC0
braces.check=1
braces.sloppy=1
#selection.fore=#006000
# DADADA used as background because it yields standard silver C0C0C0
# on low colour displays and a reasonable light grey on higher bit depths
selection.back=#DADADA
whitespace.fore=#FF0000
whitespace.back=#FFF0F0
error.marker.fore=#0000A0
error.marker.back=#DADAFF
bookmark.fore=#000000
bookmark.back=#FFFF00
use.monospaced=1


# Checking
are.you.sure=0
are.you.sure.for.build=0
#quit.on.close.last=1
load.on.activate=1
save.on.deactivate=1
are.you.sure.on.reload=0
#reload.preserves.undo=1
check.if.already.open=1
default.file.ext=.sdlbas
title.full.path=1
title.show.buffers=1
save.recent=1
save.session=1
open.dialog.in.file.directory=1
strip.trailing.spaces=1
ensure.final.line.end=1
ensure.consistent.line.ends=1
#save.deletes.first=1
buffers=50

if PLAT_WIN
    api.*.sdlbas=$(SciteDefaultHome)\..\share\sdlBasic\sdlBasic.api
if PLAT_GTK
    api.*.sdlbas=$(SciteDefaultHome)/sdlBasic.api

#win95.death.delay=1000
#translation.missing=***
#read.only=1

# Indentation
tabsize=4
indent.size=4
use.tabs=1
indent.automatic=1
indent.opening=0
indent.closing=0
#tab.indents=0
#backspace.unindents=0
#wrap=1
#cache.layout=3
output.wrap=1
#output.cache.layout=3

# Folding
# enable folding, and show lines below when collapsed.
fold=1
fold.compact=1
fold.flags=16
fold.symbols=1
#fold.on.open=1

# Find and Replace
#escapes.in.find.replace=1

if PLAT_WIN
  find.command=findstr /P /R /S /N /G:/ $(find.files)
  find.input=$(find.what)

# That only works on NT/2000/XP

# If GNU grep is available, this works about the same as the GTK version
#  find.command=grep --line-number -f - $(find.files)
#  find.input=$(find.what)

# If awk is available, this would work:
#  find.command=awk -v OFS=: -f - $(find.files)
#  find.input=/$(find.what)/ { print FILENAME, FNR, $0; }
# (Similar for gawk, but then you may as well use GNU grep.)

if PLAT_GTK
	find.command=grep --line-number "$(find.what)" $(find.files)

find.files=*.*|*.c *.cpp *.cxx *.h|*.bas *.cls *.frm *.dsr
#find.replace.matchcase=1
#find.replace.escapes=1
#find.replace.regexp=1
#find.replace.regexp.posix=1
#find.replace.wrap=0
#find.replacewith.focus=0

# Behaviour
#eol.mode=LF
#eol.auto=1

braces.check=1
braces.sloppy=1

clear.before.execute=1
vc.home.key=1
wrap.aware.home.end.keys=1
autocompleteword.automatic=1
#autocomplete.choose.single=1
autocomplete.*.ignorecase=1
calltip.*.ignorecase=1
caret.policy.xslop=1
caret.policy.width=20
caret.policy.xstrict=0
caret.policy.xeven=0
caret.policy.xjumps=0
caret.policy.yslop=1
caret.policy.lines=1
caret.policy.ystrict=1
caret.policy.yeven=1
caret.policy.yjumps=0
#visible.policy.strict=1
#visible.policy.slop=1
#visible.policy.lines=4
#time.commands=1

# Status Bar
statusbar.number=2
statusbar.text.1= line $(LineNumber), column $(ColumnNumber) ($(OverType)) ($(EOLMode)) $(FileAttr) -  $(SelLength) chars selected
statusbar.text.2=\
 $(FileNameExt) (Total size: $(BufferLength) chars, $(NbOfLines) lines)
#statusbar.text.3=\
#$(FileNameExt) (modified $(FileDate) at $(FileTime)) $(FileAttr)

if PLAT_WIN
	command.scite.help=explorer "$(SciteDefaultHome)\..\share\doc\sdlBasic\english\index.html"
	command.scite.help.subsystem=2
if PLAT_GTK
	BROWSER=x-www-browser
	#command.print.*=a2ps $(FileNameExt)
	command.scite.help=$(BROWSER)  "file:$(SciteDefaultHome)/../doc/sdlBasic/english/index.html"
# Internationalisation
# Japanese input code page 932 and ShiftJIS character set 128
#code.page=932
#character.set=128
# Unicode
#code.page=65001
code.page=0
#character.set=204
# Required for Unicode to work on GTK+:
#LC_CTYPE=en_US.UTF-8

# Export
#export.keep.ext=1
export.html.wysiwyg=1
#export.html.tabs=1
#export.html.folding=1
export.html.styleused=1
#export.html.title.fullpath=1
export.rtf.wysiwyg=1
#export.rtf.tabs=1
#export.rtf.font.face=Arial
#export.rtf.font.size=9
#export.rtf.tabsize=8

# Define values for use in the imported properties files
chars.alpha=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
chars.numeric=0123456789
chars.accented=äöåúüˇ¿‡¡·¬‚√„ƒ‰≈Â∆Ê«Á»Ë…È ÍÀÎÃÏÕÌŒÓœÔ–—Ò“Ú”Û‘Ù’ı÷ÿ¯Ÿ˘⁄˙€˚‹¸›˝ﬁ˛ﬂˆ
# This is a better set for Russian:
#chars.accented=¿‡¡·¬‚√„ƒ‰≈Â®∏∆Ê«Á»Ë…È ÍÀÎÃÏÕÌŒÓœÔ–—Ò“Ú”Û‘Ù’ı÷ˆ◊˜ÿ¯Ÿ˘⁄˙€˚‹¸›˝ﬁ˛ﬂˇ

# The open.filter setting is only used on Windows where the file selector has a menu of filters to apply
# to the types of files seen when opening.
# There is a limit (possibly 256 characters) to the length of a filter,
# so not all source extensions can be in this setting.
source.files=*.asm;*.c;*.cc;*.cpp;*.cxx;*.cs;*.h;*.hh;*.hxx;*.hpp;\
*.idl;*.odl;*.rc;*.rc2;*.dlg;*.def;\
*.vb;*.vbs;*.bas;*.frm;*.cls;*.ctl;\
*.java;*.js;*.py;*.pl;*.rb;*.cgi;*.lua;*.conf;\
make*;*.mak;\
*.properties;*.html;*.php;*.phtml;*.xml;*.iface;*.bat;*.e;\
*.sdlbas;*.sdlblib;\
*.txt;*.api

open.filter=\
sdlBasic (*.sdlbas)|*.sdlbas|\
sdlBlib (*.sdlblib)|*.sdlblib|\
All Files (*)|*|

# Give symbolic names to the set of fonts used in the standard styles.
#
if PLAT_WIN
	font.base=font:Lucida Sans Unicode,size:10
	font.small=font:Lucida Sans Unicode,size:8
	font.comment=font:Comic Sans MS,size:9,italics
	font.code.comment.box=$(font.comment)
	font.code.comment.line=$(font.comment)
	font.code.comment.doc=$(font.comment)
	font.text=font:Arial,size:10
	font.text.comment=font:Lucida Sans Unicode,size:10
	font.embedded.base=font:Lucida Sans Unicode,size:10
	font.embedded.comment=font:Comic Sans MS,size:8,italics
	font.monospace=font:Courier New,size:10
	font.vbs=font:Lucida Sans Unicode,size:9
	font.js=font:Courier New,size:9
	font.string.literal=font:Courier New,size:11

	# Give symbolic names to the set of colours used in the standard styles.
	colour.code.comment.box=fore:#007F00
	colour.code.comment.line=fore:#007F00

	colour.code.comment.doc=fore:#3F703F
	colour.text.comment=fore:#0000FF,back:#D0F0D0
	colour.other.comment=fore:#007F00
	colour.embedded.comment=back:#E0EEFF
	colour.embedded.js=back:#F0F0FF
	colour.notused=back:#FF0000

	colour.number=fore:#007F7F
	colour.keyword=fore:#0000FF
	colour.string=fore:#7F007F
	colour.char=fore:#7F007F
	colour.operator=fore:#000000
	colour.preproc=fore:#7F7F00
	colour.constant=fore:#00AA00
	colour.error=fore:#FFFF00,back:#FF0000

if PLAT_GTK
	font.base=font:helvetica,size:12
	font.small=font:lucidatypewriter,size:10
	font.comment=font:new century schoolbook,size:12
	font.code.comment.box=$(font.comment)
	font.code.comment.line=$(font.comment)
	font.code.comment.doc=$(font.comment)
	font.text=font:times,size:14
	font.text.comment=font:lucidatypewriter,size:10
	font.embedded.base=font:lucidatypewriter,size:12
	font.embedded.comment=font:lucidatypewriter,size:12
	font.monospace=font:courier,size:12
	font.vbs=font:new century schoolbook,size:12
	font.js=font:courier,size:10
	font.string.literal=font:courier,size:12

	# Give symbolic names to the set of colours used in the standard styles.
	colour.code.comment.box=fore:#007F00
	colour.code.comment.line=fore:#007F00

	colour.code.comment.doc=fore:#3F703F
	colour.text.comment=fore:#0000FF,back:#D0F0D0
	colour.other.comment=fore:#007F00
	colour.embedded.comment=back:#E0EEFF
	colour.embedded.js=back:#F0F0FF
	colour.notused=back:#FF0000

	colour.number=fore:#7F7F00
	colour.keyword=fore:#FF0000
	colour.string=fore:#7F007F
	colour.char=fore:#7F007F
	colour.operator=fore:#000000
	colour.preproc=fore:#7F7F00
	colour.constant=fore:#00AA00
	colour.error=fore:#FFFF00,back:#FF0000


# Global default styles for all languages
# Default
style.*.32=$(font.base)
# Line number
style.*.33=back:#C0C0C0,$(font.base)
if PLAT_WIN
	# Brace highlight
	style.*.34=fore:#0000FF,bold
	# Brace incomplete highlight
	style.*.35=fore:#FF0000,bold
if PLAT_GTK
	# Brace highlight
	style.*.34=fore:#FF0000,bold
	# Brace incomplete highlight
	style.*.35=fore:#0000FF,bold
# Control characters
style.*.36=
# Indentation guides
style.*.37=fore:#C0C0C0,back:#FFFFFF

# Printing - only works on Windows
if PLAT_WIN
	#print.colour.mode=1
	print.magnification=-1
	# Setup: left, right, top, bottom margins, in local units:
	# hundredths of millimeters or thousandths of inches
	print.margins=1500,1000,1000,1500
	# Header/footer:
	# && = &; &p = current page
	# &f = file name; &F = full path
	# &d = file date; &D = current date
	# &t = file time; &T = full time
	print.header.format=$(FileNameExt) ó Printed on $(CurrentDate), $(CurrentTime) ó Page $(CurrentPage)
	print.footer.format=$(FilePath) ó File date: $(FileDate) ó File time: $(FileTime)
	# Header/footer style
	print.header.style=font:Arial,size:12
	print.footer.style=font:Arial Narrow,size:10,italics

# Warnings - only works on Windows and needs to be pointed at files on machine
#if PLAT_WIN
#	warning.findwrapped=100,E:\Windows\Media\SFX\Boing.wav
#	warning.notfound=0,Effect.wav
#	warning.wrongfile=0,Glass.wav
#	warning.executeok=0,Fanfare.wav
#	warning.executeko=100,GlassBreak.wav
#	warning.nootherbookmark=100,Boing2.wav

# Define the Lexer menu,
# Each item contains three parts: menu string | file extension | key
# The only keys allowed currently are based on F-keys and alphabetic keys and look like
# [Ctrl+][Shift+][Fn|a] such as F12 or Ctrl+Shift+D.
# A '&' may be placed before a letter to be used as an accelerator. This does not work on GTK+.
#~ menu.language=\
#~ Text|txt|Shift+F11|\
#~ &Properties|properties||\
#~ sdlBasic|sdlbas||\
#~ &VB|vb||\

# User defined key commands
user.shortcuts=\
Ctrl+F12|IDM_WRAP|\
Ctrl+PageUp|IDM_PREVFILE|\
Ctrl+PageDown|IDM_NEXTFILE|
#KeypadPlus|IDM_EXPAND|\
#KeypadMinus|IDM_BLOCK_COMMENT|

# Import all the language specific properties files
import others
import sdlBasic

import ../share/sdlBasic/others
import ../share/sdlBasic/sdlBasic
